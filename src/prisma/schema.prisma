// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  username          String             @unique @db.VarChar(255)
  password          String             @db.VarChar(255)
  role              Role                @default(USER)
  fullName          String?            @db.VarChar(255)
  broker            Broker?
  company           Company?
  comments_project  Comment_Project[]
  comments_Broker   Comment_Broker[]
  comments_Company  Comment_Company[]
  comments_Property Comment_Property[]
  properties        Property[] 
}

model Broker {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  district        String           @db.VarChar(255)
  city            String           @db.VarChar(255)
  properties      Property[]
  news            News[]
  comments_Broker Comment_Broker[]
}

model Company {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  companyName      String?           @unique @db.VarChar(255)
  district         String            @db.VarChar(255)
  city             String            @db.VarChar(255)
  comments_Company Comment_Company[]
  projects         Project[]
}

model categoryProperty {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  nameCategory String     @unique @db.VarChar(255)
  properties   Property[]
}

model Property {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  category          categoryProperty   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        String
  location          String
  coordinates       String
  price             Int
  status            Int                @default(0)
  comments_Property Comment_Property[]
  broker            Broker             @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId          String
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String
}

model Project {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  projectName      String?           @unique @db.VarChar(255)
  district         String            @db.VarChar(255)
  city             String            @db.VarChar(255)
  properties       Property[]
  comments_project Comment_Project[]
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String
}

model Comment_Broker {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  broker    Broker   @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId  String
}

model Comment_Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
}

model Comment_Property {
  id         String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model Comment_Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model News {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String
  author    Broker?  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}
